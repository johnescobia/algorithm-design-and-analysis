#ifndef LINKEDLIST_CPP#define LINKEDLIST_CPPtemplate <typename T>struct Node{	T info;	Node<T> *next;};template <typename T>class LinkedList{	Node<T> *start;		public:	    // Constructor		LinkedList()		{			start = NULL;		}				// Deconstructor		~LinkedList()		{			makeEmpty();		}		// A subroutine that inserts element at the beginning of the linked list		void insertFront (T & element )		{			Node<T> *newNode = new Node<T>;			newNode->info = element;			newNode->next = start;			start = newNode;		}		// A function that returns true if element is found		// and returns false if element is not found		bool find (T & target)		{			bool found = false;			Node<T> *ptr = start;						while (ptr != NULL && !found)			{				if (ptr->info == target)					found = true;				else					ptr = ptr->next;			}						return found;		}				// A function that return start == NULL		bool isEmpty()		{			return start == NULL;		}				// A subroutine that makes the linked lists empty		void makeEmpty()		{			while (start != NULL)			{				Node<T> *ptr  = start;				start = start->next;				delete ptr;			}		}				// A function that overrides operator<<		friend std::ostream& operator<< (std::ostream& os, LinkedList<T>& list)		{			Node<T> *ptr = list.start;						while (ptr != NULL)			{				os << ptr->info << " ";				ptr = ptr->next;			}						return os;		}};#endif